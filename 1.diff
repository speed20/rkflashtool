diff --git a/fxload b/fxload
index f03ba6a..850da0a 100755
Binary files a/fxload and b/fxload differ
diff --git a/fxload.c b/fxload.c
index bfa93eb..e460ae6 100644
--- a/fxload.c
+++ b/fxload.c
@@ -9,24 +9,79 @@
 #include <libusb.h>
 #include <pthread.h>
 #include "bootrom.h"
-#include "code.h"
+#include "data/code.h"
+#include <fcntl.h>
 
-void logerror(const char *format, ...)
-{
-	va_list ap;
-	va_start(ap, format);
-	vfprintf(stderr, format, ap);
-	va_end(ap);
-}
+#include "version.h"
+#include "rkcrc.h"
+#include "rkflashtool.h"
 
 #define VENDOR	0x2207
 #define PRODUCT	0x300a
 
+#define RKFT_BLOCKSIZE      0x4000      /* must be multiple of 512 */
+#define RKFT_IDB_BLOCKSIZE  0x210
+#define RKFT_IDB_INCR       0x20
+#define RKFT_MEM_INCR       0x80
+#define RKFT_OFF_INCR       (RKFT_BLOCKSIZE>>9)
+#define MAX_PARAM_LENGTH    (128*512-12) /* cf. MAX_LOADER_PARAM in rkloader */
+#define SDRAM_BASE_ADDRESS  0x60000000
+
+#define RKFT_CMD_TESTUNITREADY      0x80000600
+#define RKFT_CMD_READFLASHID        0x80000601
+#define RKFT_CMD_READFLASHINFO      0x8000061a
+#define RKFT_CMD_READCHIPINFO       0x8000061b
+#define RKFT_CMD_READEFUSE          0x80000620
+
+#define RKFT_CMD_SETDEVICEINFO      0x00000602
+#define RKFT_CMD_ERASESYSTEMDISK    0x00000616
+#define RKFT_CMD_SETRESETFLASG      0x0000061e
+#define RKFT_CMD_RESETDEVICE        0x000006ff
+
+#define RKFT_CMD_TESTBADBLOCK       0x80000a03
+#define RKFT_CMD_READSECTOR         0x80000a04
+#define RKFT_CMD_READLBA            0x80000a14
+#define RKFT_CMD_READSDRAM          0x80000a17
+#define RKFT_CMD_UNKNOWN1           0x80000a21
+
+#define RKFT_CMD_WRITESECTOR        0x00000a05
+#define RKFT_CMD_ERASESECTORS       0x00000a06
+#define RKFT_CMD_UNKNOWN2           0x00000a0b
+#define RKFT_CMD_WRITELBA           0x00000a15
+#define RKFT_CMD_WRITESDRAM         0x00000a18
+#define RKFT_CMD_EXECUTESDRAM       0x00000a19
+#define RKFT_CMD_WRITEEFUSE         0x00000a1f
+#define RKFT_CMD_UNKNOWN3           0x00000a22
+
+#define RKFT_CMD_WRITESPARE         0x80001007
+#define RKFT_CMD_READSPARE          0x80001008
+
+#define RKFT_CMD_LOWERFORMAT        0x0000001c
+#define RKFT_CMD_WRITENKB           0x00000030
+
+#define SETBE16(a, v) do { \
+                        ((uint8_t*)a)[1] =  v      & 0xff; \
+                        ((uint8_t*)a)[0] = (v>>8 ) & 0xff; \
+                      } while(0)
+
+#define SETBE32(a, v) do { \
+                        ((uint8_t*)a)[3] =  v      & 0xff; \
+                        ((uint8_t*)a)[2] = (v>>8 ) & 0xff; \
+                        ((uint8_t*)a)[1] = (v>>16) & 0xff; \
+                        ((uint8_t*)a)[0] = (v>>24) & 0xff; \
+                      } while(0)
+
+#define BLK_SIZE 4096
+
+
 static volatile int do_exit = 0;
-char cmd_buf[4096], cmd_ret[4096];
+static uint8_t cmd[31], res[13], buf[RKFT_BLOCKSIZE];
 static int stage, total;
 static int offset = 0;
 static int cmd_count = 0;
+static int ddr_fd, usb_fd;
+static int sector;
+static uint16_t crc16;
 
 struct init_seq {
 	char cmd[31];
@@ -86,119 +141,138 @@ static struct init_seq seq[31] = {
 	}
 };
 
-static void LIBUSB_CALL recv_complete_cb(struct libusb_transfer *xfr);
+static int load_state = 0;
 
-static void LIBUSB_CALL send_complete_cb(struct libusb_transfer *xfr)
+static void prepare_cmd(uint32_t command, uint32_t offset, uint16_t nsectors)
 {
-	if (xfr->status != LIBUSB_TRANSFER_COMPLETED) {
-		fprintf(stderr, "transfer status %d\n", xfr->status);
-		libusb_free_transfer(xfr);
-		exit(3);
-	}
+    long int r = random();
 
-	if (seq[cmd_count].flag == 0) {
-		fprintf(stderr, "start to receive 13\n");
-		libusb_fill_bulk_transfer(xfr, xfr->dev_handle, 0x81, cmd_ret, 13, recv_complete_cb, NULL, 60*1000);
-	} else {
-		fprintf(stderr, "start to receive %d\n", seq[cmd_count].flag);
-		libusb_fill_bulk_transfer(xfr, xfr->dev_handle, 0x81, cmd_ret, seq[cmd_count].flag, send_complete_cb, NULL, 60*1000);
-		seq[cmd_count].flag = 0;
-	}
+    memset(cmd, 0 , 31);
+    memcpy(cmd, "USBC", 4);
 
-	libusb_submit_transfer(xfr);
+    if (r)          SETBE32(cmd+4, r);
+    if (offset)     SETBE32(cmd+17, offset);
+    if (nsectors)   SETBE16(cmd+22, nsectors);
+    if (command)    SETBE32(cmd+12, command);
 }
 
-static void LIBUSB_CALL recv_complete_cb(struct libusb_transfer *xfr)
+
+static void LIBUSB_CALL cmd_cb(struct libusb_transfer *xfr);
+static void LIBUSB_CALL res_cb(struct libusb_transfer *xfr);
+
+static void LIBUSB_CALL res_cb(struct libusb_transfer *xfr)
 {
+	printf("enter res_cb\n");
+
 	if (xfr->status != LIBUSB_TRANSFER_COMPLETED) {
-		fprintf(stderr, "transfer status %d\n", xfr->status);
+		fprintf(stderr, "res_cb, transfer status %d\n", xfr->status);
 		libusb_free_transfer(xfr);
 		exit(3);
 	}
 
-	printf("write init seq %d complete\n", cmd_count);
-	cmd_count++;
+	sector++;
+	if (sector == 0x06) {
+		printf("step 3 complete.\n");
+		printf("start step 4, load dram firmware.\n");
 
-	if (cmd_count < 7) {
-		libusb_fill_bulk_transfer(xfr, xfr->dev_handle, 0x02, seq[cmd_count].cmd, 31, send_complete_cb, NULL, 60*1000);
-		libusb_submit_transfer(xfr);
-	} else {
+		load_state = 4;
 		exit(0);
+	} else {
+		prepare_cmd(RKFT_CMD_ERASESECTORS, sector, 0x0100);
+
+		libusb_fill_bulk_transfer(xfr, xfr->dev_handle, 0x02, cmd, 31, cmd_cb, NULL, 60*1000);
+		libusb_submit_transfer(xfr);
 	}
 }
 
-static void LIBUSB_CALL cb_xfr(struct libusb_transfer *xfr)
+static void LIBUSB_CALL cmd_cb(struct libusb_transfer *xfr)
 {
-	unsigned char *buf;
-	int addr, len;
-
-	fprintf(stderr, "stage %d complete\n", stage);
-
 	if (xfr->status != LIBUSB_TRANSFER_COMPLETED) {
-		fprintf(stderr, "transfer status %d\n", xfr->status);
+		fprintf(stderr, "cmd_cb, transfer status %d\n", xfr->status);
 		libusb_free_transfer(xfr);
 		exit(3);
 	}
 
-	if (offset == total) {
-		int cfg, i, rc;
-		unsigned char data[18];
-		libusb_device_handle *device = NULL;
-		struct libusb_transfer *transfer;
+	/* read 13 bytes return value */
+	libusb_fill_bulk_transfer(xfr, xfr->dev_handle, 0x81, cmd, 13, res_cb, NULL, 60*1000);
+	libusb_submit_transfer(xfr);
+}
 
-		usleep(2000*1000);
+static void LIBUSB_CALL ddr_xfr_cb(struct libusb_transfer *xfr)
+{
+	int len;
 
-		device = xfr->dev_handle;
-#if 1
-		libusb_get_descriptor(device, 0x01, 0, data, 18);
+	if (xfr->status != LIBUSB_TRANSFER_COMPLETED) {
+		fprintf(stderr, "ddr_xfr_cb transfer status %d\n", xfr->status);
+		libusb_free_transfer(xfr);
+		exit(3);
+	}
 
-		libusb_get_configuration(device, &cfg);
-		if (cfg != 1) {
-			fprintf(stderr, "set config\n");
-			libusb_set_configuration(device, 1);
+	if (load_state == 0) {
+		len = read(ddr_fd, buf + LIBUSB_CONTROL_SETUP_SIZE, BLK_SIZE);
+		if (len < 0) {
+			fprintf(stderr, "read ddr image failed\n");
+			exit(-1);
 		}
 
-		libusb_free_transfer(xfr);
-#endif
-		fprintf(stderr, "transfer complete\n");
-		do_exit = 1;
-
-#if 0
-		fprintf(stderr, "reopen device\n");
-		device = libusb_open_device_with_vid_pid(NULL, VENDOR, PRODUCT);
-		if (device == NULL) {
-			logerror("libusb_open() failed\n");
+		if (len == 0) {
+			printf("step 1 complete.\n");
+			printf("start step 2, load usbplug image.\n");
+
+			len = read(usb_fd, buf + LIBUSB_CONTROL_SETUP_SIZE, BLK_SIZE);
+			if (len < 0) {
+				fprintf(stderr, "read ddr image failed\n");
+				exit(-1);
+			}
+
+			load_state = 1;
+			crc16 = 0xffff;
+			crc16 = rkcrc16(crc16, buf + LIBUSB_CONTROL_SETUP_SIZE, len);
+			libusb_fill_control_setup(buf, LIBUSB_ENDPOINT_OUT | LIBUSB_REQUEST_TYPE_VENDOR, 12, 0, 0x0472, len);
+			libusb_submit_transfer(xfr);
+		} else {
+			crc16 = rkcrc16(crc16, buf + LIBUSB_CONTROL_SETUP_SIZE, len);
+
+			if (len != 4096) {
+				buf[LIBUSB_CONTROL_SETUP_SIZE + len++] = crc16 >> 8;
+				buf[LIBUSB_CONTROL_SETUP_SIZE + len++] = crc16 & 0xff;
+			}
+
+			printf("last ddr len: %d\n", len);
+
+			libusb_fill_control_setup(buf, LIBUSB_ENDPOINT_OUT | LIBUSB_REQUEST_TYPE_VENDOR, 12, 0, 0x0471, len);
+			libusb_submit_transfer(xfr);
 		}
-
-		libusb_set_auto_detach_kernel_driver(device, 1);
-		rc = libusb_claim_interface(device, 0);
-		if (rc != LIBUSB_SUCCESS) {
-			logerror("libusb_claim_interface failed: %s\n", libusb_error_name(rc));
+	} else if (load_state == 1) {
+		printf("write usb image again\n");
+		len = read(usb_fd, buf + LIBUSB_CONTROL_SETUP_SIZE, BLK_SIZE);
+		if (len < 0) {
+			fprintf(stderr, "read ddr image failed\n");
+			exit(-1);
 		}
-#endif
 
-	} else {
-		stage++;
-
-		if (stage < 3)
-			addr = 0x0471;
-		else
-			addr = 0x0472;
+		if (len == 0) {
+			printf("step 2 complete.\n");
+			usleep(20 * 1000);
+			printf("start step 3, erase sectors.\n");
 
-		if (stage == 2 || total - offset == 2050)
-			len = 2050;
-		else
-			len = 4096;
+			load_state = 3;
+			sector = 0x02;
+			prepare_cmd(RKFT_CMD_ERASESECTORS, sector, 0x0100);
 
-		buf = (unsigned char *)xfr->user_data;
-		memset(buf, 0, LIBUSB_CONTROL_SETUP_SIZE + 4096);
-		memcpy(buf + LIBUSB_CONTROL_SETUP_SIZE, bootrom + offset, len);
-		offset += len;
+			libusb_fill_bulk_transfer(xfr, xfr->dev_handle, 0x02, cmd, 31, res_cb, NULL, 60*1000);
+			libusb_submit_transfer(xfr);
+		} else {
+			crc16 = rkcrc16(crc16, buf + LIBUSB_CONTROL_SETUP_SIZE, len);
 
-		libusb_fill_control_setup(buf, LIBUSB_ENDPOINT_OUT | LIBUSB_REQUEST_TYPE_VENDOR, 12, 0, addr, len);
-		libusb_fill_control_transfer(xfr, xfr->dev_handle, buf, cb_xfr, buf, 60 * 1000);
+			if (len != 4096) {
+				buf[LIBUSB_CONTROL_SETUP_SIZE + len++] = crc16 >> 8;
+				buf[LIBUSB_CONTROL_SETUP_SIZE + len++] = crc16 & 0xff;
+			}
 
-		libusb_submit_transfer(xfr);
+			libusb_fill_control_setup(buf, LIBUSB_ENDPOINT_OUT | LIBUSB_REQUEST_TYPE_VENDOR, 12, 0, 0x0472, len);
+			libusb_submit_transfer(xfr);
+		}
 	}
 }
 
@@ -214,23 +288,50 @@ void *handle_event_func()
 	return NULL;
 }
 
-#define FIRMWARE 0
-#define LOADER 1
-
 int main(int argc, char **argv)
 {
 	int status;
 	libusb_device_handle *device = NULL;
 	struct libusb_transfer *xfr;
 	pthread_t tid;
-	unsigned char *buf;
+	int opt, len;
+	char *ddr_file, *usb_file;
+
+	ddr_file = usb_file = NULL;
+	while ((opt = getopt(argc, argv, "d:u:")) != -1) {
+		switch (opt) {
+			case 'd':
+				ddr_file = strdup(optarg);
+				break;
+			case 'u':
+				usb_file = strdup(optarg);
+				break;
+			default:
+				printf("usage: fxload -d ddr_file -u usb_file\n");
+		}
+	}
+
+	if (ddr_file == NULL || usb_file == NULL) {
+		printf("usage: fxload -d ddr_file -u usb_file\n");
+		return 0;
+	}
 
-	total = sizeof(bootrom) / sizeof(bootrom[0]);
+	ddr_fd = open(ddr_file, O_RDONLY);
+	if (ddr_fd < 0) {
+		fprintf(stderr, "can't open ddr image\n");
+		return -1;
+	}
+
+	usb_fd = open(usb_file, O_RDONLY);
+	if (usb_fd < 0) {
+		fprintf(stderr, "can't open usb image\n");
+		return -1;
+	}
 
 	/* open the device using libusb */
 	status = libusb_init(NULL);
 	if (status < 0) {
-		logerror("libusb_init() failed: %s\n", libusb_error_name(status));
+		fprintf(stderr, "libusb_init() failed: %s\n", libusb_error_name(status));
 		return -1;
 	}
 	libusb_set_debug(NULL, 3);
@@ -238,7 +339,7 @@ int main(int argc, char **argv)
 	/* try to pick up missing parameters from known devices */
 	device = libusb_open_device_with_vid_pid(NULL, VENDOR, PRODUCT);
 	if (device == NULL) {
-		logerror("libusb_open() failed\n");
+		fprintf(stderr, "libusb_open() failed\n");
 		goto err;
 	}
 
@@ -246,7 +347,7 @@ int main(int argc, char **argv)
 	libusb_set_auto_detach_kernel_driver(device, 1);
 	status = libusb_claim_interface(device, 0);
 	if (status != LIBUSB_SUCCESS) {
-		logerror("libusb_claim_interface failed: %s\n", libusb_error_name(status));
+		fprintf(stderr, "libusb_claim_interface failed: %s\n", libusb_error_name(status));
 		goto err;
 	}
 
@@ -254,28 +355,17 @@ int main(int argc, char **argv)
 	if (status < 0)
 		goto err;
 
+	/* step 1, load ddr image */
 	xfr = libusb_alloc_transfer(0);
-	if (argv[1][1] == '1') {
-		stage = 0;
-
-		buf = (unsigned char*) malloc(LIBUSB_CONTROL_SETUP_SIZE + 4096);
-		memset(buf, 0, LIBUSB_CONTROL_SETUP_SIZE + 4096);
-		memcpy(buf + LIBUSB_CONTROL_SETUP_SIZE, bootrom, 4096);
-		offset += 4096;
-
-		libusb_fill_control_setup(buf, LIBUSB_ENDPOINT_OUT | LIBUSB_REQUEST_TYPE_VENDOR, 12, 0, 0x0471, 4096);
-		libusb_fill_control_transfer(xfr, device, buf, cb_xfr, buf, 60 * 1000);
-	} else if (argv[1][1] == '2') {
-		libusb_fill_bulk_transfer(xfr, device, 0x02, seq[cmd_count].cmd, 31, send_complete_cb, NULL, 60*1000);
-	} else if (argv[1][1] == '3') {
-		/* erase first */
-		libusb_fill_bulk_transfer(xfr, device, 0x02, seq[cmd_count].cmd, 31, send_complete_cb, NULL, 60*1000);
-	} else if (argv[1][1] == '4') {
-
-55 53 42 43 9b bc 62 99 00 00 00 00 00 00 0a 05
-	00 00 00 20 00 00 00 10 00 00 00 00 00 00 00
-	}
 
+	memset(buf, 0, RKFT_BLOCKSIZE);
+
+	len = read(ddr_fd, buf + LIBUSB_CONTROL_SETUP_SIZE, BLK_SIZE);
+	crc16 = 0xffff;
+	crc16 = rkcrc16(crc16, buf + LIBUSB_CONTROL_SETUP_SIZE, len);
+
+	libusb_fill_control_setup(buf, LIBUSB_ENDPOINT_OUT | LIBUSB_REQUEST_TYPE_VENDOR, 12, 0, 0x0471, len);
+	libusb_fill_control_transfer(xfr, device, buf, ddr_xfr_cb, NULL, 60 * 1000);
 	libusb_submit_transfer(xfr);
 
 	pthread_join(tid, NULL);
